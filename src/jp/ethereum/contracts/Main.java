package jp.ethereum.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.0.
 */
public class Main extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b5060046000815480929190620000279062000497565b919050555060056000815480929190620000419062000497565b91905055506000600660020160006101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600660020160046101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600690806001815401808255809150506001900390600052602060002090600302016000909190919091506000820181600001908054620000d99062000461565b620000e69291906200030f565b506001820181600101908054620000fd9062000461565b6200010a9291906200030f565b506002820160009054906101000a900460030b8160020160006101000a81548163ffffffff021916908360030b63ffffffff1602179055506002820160049054906101000a900460030b8160020160046101000a81548163ffffffff021916908360030b63ffffffff16021790555050506040518060400160405280600681526020017f73616d706c65000000000000000000000000000000000000000000000000000081525060096000019080519060200190620001cb929190620003a7565b506040518060400160405280600681526020017f73616d706c650000000000000000000000000000000000000000000000000000815250600960010190805190602001906200021c929190620003a7565b506040518060400160405280600681526020017f73616d706c650000000000000000000000000000000000000000000000000000815250600960020190805190602001906200026d929190620003a7565b506001600990806001815401808255809150506001900390600052602060002090600302016000909190919091506000820181600001908054620002b19062000461565b620002be9291906200030f565b506001820181600101908054620002d59062000461565b620002e29291906200030f565b506002820181600201908054620002f99062000461565b620003069291906200030f565b50505062000543565b8280546200031d9062000461565b90600052602060002090601f01602090048101928262000341576000855562000394565b82601f1062000354578054855562000394565b828001600101855582156200039457600052602060002091601f016020900482015b828111156200039357825482559160010191906001019062000376565b5b509050620003a3919062000438565b5090565b828054620003b59062000461565b90600052602060002090601f016020900481019282620003d9576000855562000425565b82601f10620003f457805160ff191683800117855562000425565b8280016001018555821562000425579182015b828111156200042457825182559160200191906001019062000407565b5b50905062000434919062000438565b5090565b5b808211156200045357600081600090555060010162000439565b5090565b6000819050919050565b600060028204905060018216806200047a57607f821691505b6020821081141562000491576200049062000514565b5b50919050565b6000620004a48262000457565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620004da57620004d9620004e5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61253f80620005536000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806364e5f75c116100a2578063c055fcd411610071578063c055fcd414610345578063d3e1924014610361578063e339e7af1461037d578063e86bc6ea14610399578063f4bf93be146103b957610116565b806364e5f75c14610294578063673402e5146102c45780636fc0bb05146102e5578063bc155f121461031557610116565b8063365b98b2116100e9578063365b98b2146101ca5780633ffbd47f146101fc5780634f8b41e614610218578063587411a31461023457806360d8c5ec1461026457610116565b80630a3f8f661461011b5780631a21b3651461014b5780632978465d146101675780632c7424af14610197575b600080fd5b61013560048036038101906101309190611f26565b6103e9565b60405161014291906121b3565b60405180910390f35b61016560048036038101906101609190611f67565b6104a9565b005b610181600480360381019061017c9190611f26565b61077b565b60405161018e91906121ce565b60405180910390f35b6101b160048036038101906101ac9190611fd3565b610932565b6040516101c194939291906121f0565b60405180910390f35b6101e460048036038101906101df9190611fd3565b610a9c565b6040516101f393929190612243565b60405180910390f35b61021660048036038101906102119190611f67565b610c6e565b005b610232600480360381019061022d9190611f67565b610e5e565b005b61024e60048036038101906102499190611f26565b610f07565b60405161025b919061228f565b60405180910390f35b61027e60048036038101906102799190611f26565b610f35565b60405161028b91906121ce565b60405180910390f35b6102ae60048036038101906102a99190611f26565b611095565b6040516102bb91906121ce565b60405180910390f35b6102cc6111f5565b6040516102dc94939291906121f0565b60405180910390f35b6102ff60048036038101906102fa9190611f26565b61133d565b60405161030c9190612198565b60405180910390f35b61032f600480360381019061032a9190611f26565b611378565b60405161033c91906121b3565b60405180910390f35b61035f600480360381019061035a9190611f67565b611438565b005b61037b60048036038101906103769190611f26565b6114e1565b005b61039760048036038101906103929190611f26565b6117f4565b005b6103a1611b07565b6040516103b093929190612243565b60405180910390f35b6103d360048036038101906103ce9190611f26565b611cb7565b6040516103e0919061228f565b60405180910390f35b6000806002836040516103fc9190612152565b9081526020016040518091039020541461048e5760006002836040516104229190612152565b90815260200160405180910390205481548110610468577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160049054906101000a900460030b90506104a4565b600660020160049054906101000a900460030b90505b919050565b60006002836040516104bb9190612152565b9081526020016040518091039020541461055b576104d98183611ce5565b60006002846040516104eb9190612152565b90815260200160405180910390205481548110610531577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001019080519060200190610555929190611d79565b50610777565b600060069080600181540180825580915050600190039060005260206000209060030201600090919091909150600082018160000190805461059c906123ac565b6105a7929190611dff565b5060018201816001019080546105bc906123ac565b6105c7929190611dff565b506002820160009054906101000a900460030b8160020160006101000a81548163ffffffff021916908360030b63ffffffff1602179055506002820160049054906101000a900460030b8160020160046101000a81548163ffffffff021916908360030b63ffffffff16021790555050506004600081548092919061064b9061240b565b9190505560028360405161065f9190612152565b9081526020016040518091039020819055508160006002846040516106849190612152565b908152602001604051809103902054815481106106ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000190805190602001906106ee929190611d79565b506106f98183611ce5565b600060028460405161070b9190612152565b90815260200160405180910390205481548110610751577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001019080519060200190610775929190611d79565b505b5050565b6060600060028360405161078f9190612152565b9081526020016040518091039020541461089c5760006002836040516107b59190612152565b908152602001604051809103902054815481106107fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018054610817906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610843906123ac565b80156108905780601f1061086557610100808354040283529160200191610890565b820191906000526020600020905b81548152906001019060200180831161087357829003601f168201915b5050505050905061092d565b600660010180546108ac906123ac565b80601f01602080910402602001604051908101604052809291908181526020018280546108d8906123ac565b80156109255780601f106108fa57610100808354040283529160200191610925565b820191906000526020600020905b81548152906001019060200180831161090857829003601f168201915b505050505090505b919050565b6000818154811061094257600080fd5b9060005260206000209060030201600091509050806000018054610965906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610991906123ac565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b5050505050908060010180546109f3906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f906123ac565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b5050505050908060020160009054906101000a900460030b908060020160049054906101000a900460030b905084565b60018181548110610aac57600080fd5b9060005260206000209060030201600091509050806000018054610acf906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610afb906123ac565b8015610b485780601f10610b1d57610100808354040283529160200191610b48565b820191906000526020600020905b815481529060010190602001808311610b2b57829003601f168201915b505050505090806001018054610b5d906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610b89906123ac565b8015610bd65780601f10610bab57610100808354040283529160200191610bd6565b820191906000526020600020905b815481529060010190602001808311610bb957829003601f168201915b505050505090806002018054610beb906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610c17906123ac565b8015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b5050505050905083565b6000600383604051610c809190612152565b9081526020016040518091039020541415610e5a576001600990806001815401808255809150506001900390600052602060002090600302016000909190919091506000820181600001908054610cd6906123ac565b610ce1929190611dff565b506001820181600101908054610cf6906123ac565b610d01929190611dff565b506002820181600201908054610d16906123ac565b610d21929190611dff565b50505060056000815480929190610d379061240b565b91905055600383604051610d4b9190612152565b908152602001604051809103902081905550816001600384604051610d709190612152565b90815260200160405180910390205481548110610db6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000019080519060200190610dda929190611d79565b50806001600384604051610dee9190612152565b90815260200160405180910390205481548110610e34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001019080519060200190610e58929190611d79565b505b5050565b6000600383604051610e709190612152565b90815260200160405180910390205414610f0357806001600384604051610e979190612152565b90815260200160405180910390205481548110610edd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016002019080519060200190610f01929190611d79565b505b5050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60606000600383604051610f499190612152565b9081526020016040518091039020541415610f9b576040518060400160405280600e81526020017f75736572206e6f742065786973740000000000000000000000000000000000008152509050611090565b6001600383604051610fad9190612152565b90815260200160405180910390205481548110610ff3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201805461100f906123ac565b80601f016020809104026020016040519081016040528092919081815260200182805461103b906123ac565b80156110885780601f1061105d57610100808354040283529160200191611088565b820191906000526020600020905b81548152906001019060200180831161106b57829003601f168201915b505050505090505b919050565b606060006003836040516110a99190612152565b90815260200160405180910390205414156110fb576040518060400160405280600e81526020017f75736572206e6f7420657869737400000000000000000000000000000000000081525090506111f0565b600160038360405161110d9190612152565b90815260200160405180910390205481548110611153577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101805461116f906123ac565b80601f016020809104026020016040519081016040528092919081815260200182805461119b906123ac565b80156111e85780601f106111bd576101008083540402835291602001916111e8565b820191906000526020600020905b8154815290600101906020018083116111cb57829003601f168201915b505050505090505b919050565b6006806000018054611206906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611232906123ac565b801561127f5780601f106112545761010080835404028352916020019161127f565b820191906000526020600020905b81548152906001019060200180831161126257829003601f168201915b505050505090806001018054611294906123ac565b80601f01602080910402602001604051908101604052809291908181526020018280546112c0906123ac565b801561130d5780601f106112e25761010080835404028352916020019161130d565b820191906000526020600020905b8154815290600101906020018083116112f057829003601f168201915b5050505050908060020160009054906101000a900460030b908060020160049054906101000a900460030b905084565b6000806003836040516113509190612152565b908152602001604051809103902054141561136e5760009050611373565b600190505b919050565b60008060028360405161138b9190612152565b9081526020016040518091039020541461141d5760006002836040516113b19190612152565b908152602001604051809103902054815481106113f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460030b9050611433565b600660020160009054906101000a900460030b90505b919050565b600060038360405161144a9190612152565b908152602001604051809103902054146114dd578060016003846040516114719190612152565b908152602001604051809103902054815481106114b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010190805190602001906114db929190611d79565b505b5050565b60006002826040516114f39190612152565b908152602001604051809103902054146115b45760006002826040516115199190612152565b9081526020016040518091039020548154811061155f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201600081819054906101000a900460030b8092919061158d906123de565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550506117f1565b60006006908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201816000019080546115f5906123ac565b611600929190611dff565b506001820181600101908054611615906123ac565b611620929190611dff565b506002820160009054906101000a900460030b8160020160006101000a81548163ffffffff021916908360030b63ffffffff1602179055506002820160049054906101000a900460030b8160020160046101000a81548163ffffffff021916908360030b63ffffffff1602179055505050600460008154809291906116a49061240b565b919050556002826040516116b89190612152565b9081526020016040518091039020819055508060006002836040516116dd9190612152565b90815260200160405180910390205481548110611723577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000019080519060200190611747929190611d79565b50600060028260405161175a9190612152565b908152602001604051809103902054815481106117a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201600081819054906101000a900460030b809291906117ce906123de565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b50565b60006002826040516118069190612152565b908152602001604051809103902054146118c757600060028260405161182c9190612152565b90815260200160405180910390205481548110611872577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201600481819054906101000a900460030b809291906118a0906123de565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050611b04565b6000600690806001815401808255809150506001900390600052602060002090600302016000909190919091506000820181600001908054611908906123ac565b611913929190611dff565b506001820181600101908054611928906123ac565b611933929190611dff565b506002820160009054906101000a900460030b8160020160006101000a81548163ffffffff021916908360030b63ffffffff1602179055506002820160049054906101000a900460030b8160020160046101000a81548163ffffffff021916908360030b63ffffffff1602179055505050600460008154809291906119b79061240b565b919050556002826040516119cb9190612152565b9081526020016040518091039020819055508060006002836040516119f09190612152565b90815260200160405180910390205481548110611a36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000019080519060200190611a5a929190611d79565b506000600282604051611a6d9190612152565b90815260200160405180910390205481548110611ab3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201600481819054906101000a900460030b80929190611ae1906123de565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b50565b6009806000018054611b18906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611b44906123ac565b8015611b915780601f10611b6657610100808354040283529160200191611b91565b820191906000526020600020905b815481529060010190602001808311611b7457829003601f168201915b505050505090806001018054611ba6906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd2906123ac565b8015611c1f5780601f10611bf457610100808354040283529160200191611c1f565b820191906000526020600020905b815481529060010190602001808311611c0257829003601f168201915b505050505090806002018054611c34906123ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611c60906123ac565b8015611cad5780601f10611c8257610100808354040283529160200191611cad565b820191906000526020600020905b815481529060010190602001808311611c9057829003601f168201915b5050505050905083565b6003818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60606000600283604051611cf99190612152565b90815260200160405180910390205481548110611d3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010183604051602001611d62929190612169565b604051602081830303815290604052905092915050565b828054611d85906123ac565b90600052602060002090601f016020900481019282611da75760008555611dee565b82601f10611dc057805160ff1916838001178555611dee565b82800160010185558215611dee579182015b82811115611ded578251825591602001919060010190611dd2565b5b509050611dfb9190611e8c565b5090565b828054611e0b906123ac565b90600052602060002090601f016020900481019282611e2d5760008555611e7b565b82601f10611e3e5780548555611e7b565b82800160010185558215611e7b57600052602060002091601f016020900482015b82811115611e7a578254825591600101919060010190611e5f565b5b509050611e889190611e8c565b5090565b5b80821115611ea5576000816000905550600101611e8d565b5090565b6000611ebc611eb7846122db565b6122aa565b905082815260208101848484011115611ed457600080fd5b611edf84828561236a565b509392505050565b600082601f830112611ef857600080fd5b8135611f08848260208601611ea9565b91505092915050565b600081359050611f20816124f2565b92915050565b600060208284031215611f3857600080fd5b600082013567ffffffffffffffff811115611f5257600080fd5b611f5e84828501611ee7565b91505092915050565b60008060408385031215611f7a57600080fd5b600083013567ffffffffffffffff811115611f9457600080fd5b611fa085828601611ee7565b925050602083013567ffffffffffffffff811115611fbd57600080fd5b611fc985828601611ee7565b9150509250929050565b600060208284031215611fe557600080fd5b6000611ff384828501611f11565b91505092915050565b61200581612347565b82525050565b61201481612353565b82525050565b600061202582612320565b61202f818561232b565b935061203f818560208601612379565b612048816124e1565b840191505092915050565b600061205e82612320565b612068818561233c565b9350612078818560208601612379565b80840191505092915050565b60008154612091816123ac565b61209b818661233c565b945060018216600081146120b657600181146120c7576120fa565b60ff198316865281860193506120fa565b6120d08561230b565b60005b838110156120f2578154818901526001820191506020810190506120d3565b838801955050505b50505092915050565b600061211060018361233c565b91507f20000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b61214c81612360565b82525050565b600061215e8284612053565b915081905092915050565b60006121758285612084565b915061218082612103565b915061218c8284612053565b91508190509392505050565b60006020820190506121ad6000830184611ffc565b92915050565b60006020820190506121c8600083018461200b565b92915050565b600060208201905081810360008301526121e8818461201a565b905092915050565b6000608082019050818103600083015261220a818761201a565b9050818103602083015261221e818661201a565b905061222d604083018561200b565b61223a606083018461200b565b95945050505050565b6000606082019050818103600083015261225d818661201a565b90508181036020830152612271818561201a565b90508181036040830152612285818461201a565b9050949350505050565b60006020820190506122a46000830184612143565b92915050565b6000604051905081810181811067ffffffffffffffff821117156122d1576122d06124b2565b5b8060405250919050565b600067ffffffffffffffff8211156122f6576122f56124b2565b5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b60008160030b9050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561239757808201518184015260208101905061237c565b838111156123a6576000848401525b50505050565b600060028204905060018216806123c457607f821691505b602082108114156123d8576123d7612483565b5b50919050565b60006123e982612353565b9150637fffffff821415612400576123ff612454565b5b600182019050919050565b600061241682612360565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561244957612448612454565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6124fb81612360565b811461250657600080fd5b5056fea264697066735822122022a968028490bf90c31da8dfa2823429a72aa5ef56d18398105e8df891717a5664736f6c63430008000033\n";

    public static final String FUNC_CHECKREGISTERED = "checkRegistered";

    public static final String FUNC_GETDEPARTMENT = "getDepartment";

    public static final String FUNC_GETDIFFICULT = "getDifficult";

    public static final String FUNC_GETEASY = "getEasy";

    public static final String FUNC_GETPASS = "getPass";

    public static final String FUNC_GETREVIEWS = "getReviews";

    public static final String FUNC_MIKE = "mike";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SETDEPARTMENT = "setDepartment";

    public static final String FUNC_SETPASS = "setPass";

    public static final String FUNC_SETREVIEW = "setReview";

    public static final String FUNC_SUBJECT = "subject";

    public static final String FUNC_SUBJECTS = "subjects";

    public static final String FUNC_TEMP = "temp";

    public static final String FUNC_USER = "user";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_VOTEDIFFICULT = "voteDifficult";

    public static final String FUNC_VOTEEASY = "voteEasy";

    @Deprecated
    protected Main(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Main(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Main(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Main(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> checkRegistered(String _mail) {
        final Function function = new Function(
                FUNC_CHECKREGISTERED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_mail)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getDepartment(String _mail) {
        final Function function = new Function(
                FUNC_GETDEPARTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_mail)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getDifficult(String _id) {
        final Function function = new Function(
                FUNC_GETDIFFICULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getEasy(String _id) {
        final Function function = new Function(
                FUNC_GETEASY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getPass(String _mail) {
        final Function function = new Function(
                FUNC_GETPASS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_mail)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getReviews(String _id) {
        final Function function = new Function(
                FUNC_GETREVIEWS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mike() {
        final Function function = new Function(
                FUNC_MIKE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> register(String _mail, String _pass) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_mail), 
                new org.web3j.abi.datatypes.Utf8String(_pass)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDepartment(String _mail, String _department) {
        final Function function = new Function(
                FUNC_SETDEPARTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_mail), 
                new org.web3j.abi.datatypes.Utf8String(_department)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPass(String _mail, String _pass) {
        final Function function = new Function(
                FUNC_SETPASS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_mail), 
                new org.web3j.abi.datatypes.Utf8String(_pass)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setReview(String _id, String comment) {
        final Function function = new Function(
                FUNC_SETREVIEW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Utf8String(comment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> subject(String param0) {
        final Function function = new Function(
                FUNC_SUBJECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> subjects(BigInteger param0) {
        final Function function = new Function(
                FUNC_SUBJECTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> temp() {
        final Function function = new Function(
                FUNC_TEMP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> user(String param0) {
        final Function function = new Function(
                FUNC_USER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> users(BigInteger param0) {
        final Function function = new Function(
                FUNC_USERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> voteDifficult(String _id) {
        final Function function = new Function(
                FUNC_VOTEDIFFICULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> voteEasy(String _id) {
        final Function function = new Function(
                FUNC_VOTEEASY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Main load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Main(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Main load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Main(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Main load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Main(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Main load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Main(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Main> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Main.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Main> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Main.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Main> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Main.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Main> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Main.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
